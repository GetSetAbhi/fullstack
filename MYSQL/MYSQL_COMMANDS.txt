https://www.w3schools.com/sql/sql_intro.asp
https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_union_all2
https://www.tutorialspoint.com/sql/index.htm

1) CREATE DATABASE
	
	CREATE DATABASE <<DB_NAME>>
	
2) DROP A DATABASE
	DROP DATABASE <DB_NAME>

3) CREATE TABLE

	CREATE TABLE <TABLE_NAME>(ID INT NOT NULL PRIMARY KEY, NAME VARCHAR(30), OCCUPATION VARCHAR(30));
	
4) INSERT VALUE INTO TABLE

	INSERT INTO <TABLE_NAME> VALUES(1, "ABHI", "SE");
	
5) UPDATE A VALUE IN TABLE

	UPDATE EMPLOYEE SET NAME="aRAINA" WHERE ID = 2;
	
6) USAGE OF GROUP BY INSQL
	
	below query will count the number of people in each occupation

	SELECT COUNT(ID),OCCUPATION FROM EMPLOYEE GROUP BY OCCUPATION;
	
7) ORDER BY QUERY

	SELECT * FROM EMPLOYEE GROUP BY OCCUPATION order by ID ASC;
	SELECT * FROM EMPLOYEE GROUP BY OCCUPATION order by ID ASC;
	
8) HAVING
	having is a condition on aggregate functions in sql
	
	below query will count the number of people in each occuption such that no of people in each occupation is 1
	
	SELECT COUNT(ID),OCCUPATION FROM EMPLOYEE GROUP BY OCCUPATION HAVING COUNT(ID) = 1;

9) NULL | NOT NULL

	SELECT column_names FROM table_name WHERE column_name IS NOT NULL;
	
	SELECT column_names FROM table_name WHERE column_name IS NULL;
	
10) IN QUERY 

	below query will display all records where name is either "Abhi" or "Raina"
	
	SELECT * FROM EMPLOYEE WHERE NAME IN ("ABHI", "RAINA");

11) BETWEEN QUERY

	below query will display all records where id is between 1 & 3. (1 and 3 is inclusive)
	
	SELECT * FROM EMPLOYEE WHERE ID BETWEEN 1 AND 2;


12) FIND THE NTH LASRGEST PARICE OR ANY VALUE ON PRODUCT TABLE

	SELECT ProductName, min(PRICE) from (SELECT ProductName, Price from Products order by Price desc limit 5);
	
13) INNER JOIN EXAMPLE

	inner join returns matching result from both tables
	SELECT c.CustomerID, c.CustomerName, o.OrderID FROM Customers as c INNER JOIN Orders as o ON c.CustomerID = o.CustomerID order by c.CustomerID;
	
14) RIGHT JOIN RETURNS ALL RESULTS FROM TABLE ON THE RIGHT EVEN IF NO MATCHING RESULTS ARE FOUND ON THE TABLE ON LEFT

15) LEFT JOIN RETURNS ALL RESULTS FROM TABLE ON THE LEFT EVEN IF NO MATCHING RESULTS ARE FOUND ON THE TABLE ON RIGHT